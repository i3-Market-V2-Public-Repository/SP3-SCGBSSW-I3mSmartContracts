{
  "address": "0x356E8c2366f886241ac8AF2d63069Bb2fCAd4175",
  "abi": [],
  "transactionHash": "0xe1dd5f6f33c981160fe19126e59986542c41025560a42b5f875c3b2912a60e03",
  "receipt": {
    "to": null,
    "from": "0x580d142D0c2958d843499553275e427Da4Ab7Eb5",
    "contractAddress": "0x356E8c2366f886241ac8AF2d63069Bb2fCAd4175",
    "transactionIndex": 0,
    "gasUsed": "801765",
    "logsBloom": "0x
    "blockHash": "0x26033236958a7136dbd4e1fa937d574181d660c482f91b8afd8fb343836cf24d",
    "transactionHash": "0xe1dd5f6f33c981160fe19126e59986542c41025560a42b5f875c3b2912a60e03",
    "logs": [],
    "blockNumber": 801219,
    "cumulativeGasUsed": "801765",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "35c5884c2adbf2630669334f8983c84f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Agreement.sol\":\"AgreementViolationLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"contracts/Agreement.sol\":{\"content\":\"// /*\\r\\n\\r\\n// * Copyright (c) Siemens AG, 2020-2022\\r\\n\\r\\n// *\\r\\n\\r\\n// * Authors:\\r\\n\\r\\n// * Susanne Stahnke <susanne.stahnke@siemens.com>,\\r\\n\\r\\n// * Yvonne Kovacs <yvonne.kovacs@siemens.com>\\r\\n\\r\\n// *\\r\\n\\r\\n// * This work is licensed under the terms of Apache 2.0. See\\r\\n\\r\\n// * the LICENSE file in the top-level directory.\\r\\n\\r\\n// */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nenum State {\\r\\n    Active,\\r\\n    Violated,\\r\\n    Terminated\\r\\n}\\r\\n\\r\\nstruct Agreement {\\r\\n    uint256 agreementId;\\r\\n    string providerPublicKey;\\r\\n    string consumerPublicKey;\\r\\n    string dataExchangeAgreementHash;\\r\\n    string[2] signatures;\\r\\n    DataOffering dataOffering;\\r\\n    string purpose;\\r\\n    State state;\\r\\n    uint256[3] agreementDates;\\r\\n    IntendedUse intendedUse;\\r\\n    LicenseGrant licenseGrant;\\r\\n    TypeOfData typeOfData;\\r\\n    PricingModel pricingModel;\\r\\n    Violation violation;\\r\\n}\\r\\n\\r\\nstruct TypeOfData {\\r\\n    bool dataStream;\\r\\n    bool personalData;\\r\\n}\\r\\n\\r\\nstruct DataOffering {\\r\\n    string dataOfferingId;\\r\\n    uint256 dataOfferingVersion;\\r\\n    string title;\\r\\n}\\r\\n\\r\\nstruct IntendedUse {\\r\\n    bool processData;\\r\\n    bool shareDataWithThirdParty;\\r\\n    bool editData;\\r\\n}\\r\\n\\r\\nstruct LicenseGrant {\\r\\n    bool transferable;\\r\\n    bool exclusiveness;\\r\\n    bool paidUp;\\r\\n    bool revocable;\\r\\n    bool processing;\\r\\n    bool modifying;\\r\\n    bool analyzing;\\r\\n    bool storingData;\\r\\n    bool storingCopy;\\r\\n    bool reproducing;\\r\\n    bool distributing;\\r\\n    bool loaning;\\r\\n    bool selling;\\r\\n    bool renting;\\r\\n    bool furtherLicensing;\\r\\n    bool leasing;\\r\\n}\\r\\n\\r\\nstruct PricingModel {\\r\\n    string paymentType;\\r\\n    uint256 price;\\r\\n    string currency;\\r\\n    uint256 fee;\\r\\n    PaymentOnSubscription paymentOnSubscription;\\r\\n    bool isFree;\\r\\n}\\r\\n\\r\\nstruct PaymentOnSubscription {\\r\\n    string timeDuration;\\r\\n    string repeat;\\r\\n}\\r\\n\\r\\nenum ViolationType {\\r\\n    NotViolated,\\r\\n    PaymentNotCompleted,\\r\\n    DataNotTransferredAsDescribed,\\r\\n    DataNotAsDescribed,\\r\\n    LicenseViolated\\r\\n}\\r\\n\\r\\nstruct Violation {\\r\\n    ViolationType violationType;\\r\\n    string issuerId;\\r\\n    string[3] penaltyChoices;\\r\\n}\\r\\n\\r\\n\\r\\nstruct SignedResolution {\\r\\n    string proofType;\\r\\n    string resolutionType;\\r\\n    string resolution;\\r\\n    string dataExchangeId;\\r\\n    uint256 iat;\\r\\n    string iss;\\r\\n    string sub;\\r\\n}\\r\\n\\r\\nlibrary AgreementViolationLibrary {\\r\\n\\r\\n    function evaluateResolution(\\r\\n        Agreement storage agreement,\\r\\n        string memory _proofType,\\r\\n        string memory _type,\\r\\n        string memory _resolution,\\r\\n        string memory _dataExchangeId,\\r\\n        uint256 _iat,\\r\\n        string memory _iss,\\r\\n        string memory _sub) public{ \\r\\n\\r\\n        SignedResolution memory signedResolution = SignedResolution( _proofType, _type, _resolution, _dataExchangeId, _iat, _iss, _sub);\\r\\n\\r\\n        if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"completed\\\"))){\\r\\n            delete agreement.violation;\\r\\n            agreement.state = State.Active;   \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"notCompleted\\\"))) { \\r\\n                issueViolation(agreement, ViolationType.DataNotTransferredAsDescribed, signedResolution.sub); \\r\\n                agreement.state = State.Violated;    \\r\\n        }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"accepted\\\"))){ \\r\\n                issueViolation(agreement, ViolationType.DataNotTransferredAsDescribed, signedResolution.sub); \\r\\n                agreement.state = State.Violated; \\r\\n             }\\r\\n        else if(keccak256(abi.encodePacked(signedResolution.resolution)) == keccak256(abi.encodePacked(\\\"denied\\\"))){\\r\\n                delete agreement.violation; \\r\\n                agreement.state = State.Active; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function issueViolation(Agreement storage agreement, ViolationType _violationType, string memory _issuerId) private {\\r\\n        agreement.violation = Violation(_violationType, _issuerId, [\\\"Terminate\\\", \\\"NewEndDateForAgreement\\\", \\\"NewEndDateForAgreementAndReductionOfPayment\\\"]);\\r\\n    }\\r\\n\\r\\n     function getViolation(Agreement storage agreement) public view returns (Violation memory){\\r\\n        return agreement.violation;\\r\\n    }\\r\\n   \\r\\n    function enforcePenalty (Agreement storage agreement, string memory _chosenPenalty, uint256 _price, uint256 _fee,\\r\\n                             uint256 _newEndDate) public returns (Agreement storage) {\\r\\n\\r\\n        if(agreement.violation.violationType == ViolationType.DataNotTransferredAsDescribed){\\r\\n                if (keccak256(abi.encodePacked(_chosenPenalty)) == \\\"NewEndDateForAgreement\\\"){\\r\\n                    require(_newEndDate > block.timestamp, \\\"New end date must be after current date\\\");\\r\\n                    agreement.agreementDates[2] = _newEndDate;\\r\\n                }\\r\\n                else if (keccak256(abi.encodePacked(_chosenPenalty)) == (keccak256(abi.encodePacked(\\\"NewEndDateForAgreementAndReductionOfPayment\\\")))){\\r\\n                    require(_newEndDate > block.timestamp, \\\"New end date must be after current date.\\\");\\r\\n                    agreement.agreementDates[2] = _newEndDate;\\r\\n                    agreement.pricingModel.price = _price;\\r\\n                    agreement.pricingModel.fee = _fee;\\r\\n                }\\r\\n            agreement.state = State.Active;\\r\\n        }  \\r\\n        return agreement;  \\r\\n    }\\r\\n}\\r\\n    \\r\\n\\r\\ncontract DataSharingAgreement {\\r\\n    \\r\\n    using AgreementViolationLibrary for Agreement;\\r\\n  \\r\\n    uint256 agreementId;\\r\\n\\r\\n    mapping (string => bool) isPublicKeyProvider;\\r\\n    mapping (string => bool) isPublicKeyConsumer;\\r\\n\\r\\n    mapping (uint256 => Agreement) agreements;\\r\\n    mapping (string => uint256) consumerKey2agreementId;\\r\\n    mapping (string => uint256) providerKey2agreementId;\\r\\n    mapping (string => uint256[]) offeringId2agreementIds;\\r\\n\\r\\n    event AgreementActive(string providerPublicKey, string consumerPublicKey, uint256 id);\\r\\n    event PenaltyChoices(string consumerPublicKey, uint256 id, string[3] penaltyChoices);\\r\\n    event AgreeOnPenalty(string providerPublicKey, string consumerPublicKey, uint256 id, string chosenPenalty, uint256 newEndDate, uint256 price, uint256 fee);\\r\\n    event AgreementTerminated(string providerPublicKey, string consumerPublicKey,uint256 id);\\r\\n\\r\\n    function createAgreement(\\r\\n        string memory _providerPublicKey,\\r\\n        string memory _consumerPublicKey,\\r\\n        string memory _dataExchangeAgreementHash,\\r\\n        string[2] memory _signatures,\\r\\n        DataOffering memory dataOffering,\\r\\n        string memory _purpose,\\r\\n        uint256[3] memory dates,\\r\\n        IntendedUse memory intendedUse,\\r\\n        LicenseGrant memory licenseGrant,\\r\\n        PricingModel memory pricingModel,\\r\\n        TypeOfData memory typeOfData\\r\\n    ) public {\\r\\n        require (isPublicKeyProvider[_providerPublicKey] == false, \\\"Provider pK should be unique.\\\");\\r\\n        require (isPublicKeyConsumer[_consumerPublicKey] == false, \\\"Consumer pK should be unique.\\\");\\r\\n        require(dates[1] >= dates[0], \\\"Start date must be after creation date.\\\");\\r\\n        require(dates[2] > dates[1], \\\"End date must be after start date.\\\");\\r\\n\\r\\n        agreementId++; \\r\\n        agreements[agreementId] = Agreement(\\r\\n             agreementId,\\r\\n            _providerPublicKey,\\r\\n            _consumerPublicKey,\\r\\n            _dataExchangeAgreementHash,\\r\\n            _signatures,\\r\\n            dataOffering,\\r\\n            _purpose,\\r\\n            State.Active,\\r\\n            dates,\\r\\n            intendedUse,\\r\\n            licenseGrant,\\r\\n            typeOfData,\\r\\n            pricingModel,\\r\\n            Violation(ViolationType.NotViolated,\\\"\\\",[\\\"\\\",\\\"\\\",\\\"\\\"])   \\r\\n        );\\r\\n        \\r\\n        consumerKey2agreementId[_consumerPublicKey] = agreementId;\\r\\n        providerKey2agreementId[_providerPublicKey] = agreementId;\\r\\n        offeringId2agreementIds[dataOffering.dataOfferingId].push(agreementId);\\r\\n        \\r\\n        isPublicKeyProvider[_providerPublicKey] = true;\\r\\n        isPublicKeyConsumer[_consumerPublicKey] = true;\\r\\n\\r\\n        emit AgreementActive(_providerPublicKey, _consumerPublicKey, agreementId);\\r\\n    }\\r\\n\\r\\n    function getAgreement(uint256 id) public view returns (Agreement memory) {\\r\\n        return agreements[id];\\r\\n    }\\r\\n\\r\\n    function retrievePricingModel(uint256 _agreementId) public view returns (PricingModel memory){\\r\\n        return agreements[_agreementId].pricingModel;\\r\\n    }\\r\\n\\r\\n    function getState(uint256 id) public view returns (State) {\\r\\n        return agreements[id].state;\\r\\n    } \\r\\n\\r\\n    function getAgreementsByConsumer(string memory _consumerPublicKey, bool active) external view returns (Agreement memory consumerAgreement) {\\r\\n       Agreement memory agreement = agreements[consumerKey2agreementId[_consumerPublicKey]];\\r\\n       if(active){\\r\\n            if(agreement.state == State.Active)\\r\\n                        return agreement;     \\r\\n       } \\r\\n       else\\r\\n            return agreement;\\r\\n    }\\r\\n\\r\\n    function getAgreementsByProvider(string memory _providerPublicKeys, bool active) public view returns(Agreement memory providerAgreement) {\\r\\n        Agreement memory agreement = agreements[providerKey2agreementId[_providerPublicKeys]];\\r\\n        if(active){\\r\\n            if (agreement.state == State.Active)\\r\\n                return agreement;\\r\\n        }\\r\\n        else \\r\\n            return agreement;\\r\\n    }\\r\\n\\r\\n    function checkAgreementsByDataOffering(string memory _dataOfferingId) public view returns(uint256[] memory) {\\r\\n       return offeringId2agreementIds[_dataOfferingId];\\r\\n    }\\r\\n\\r\\n    function evaluateSignedResolution(uint256 _agreementId, string memory _proofType, string memory _type, string memory _resolution,\\r\\n                                string memory _dataExchangeId, uint256 _iat, string memory _iss, string memory _sub) public{ \\r\\n\\r\\n      AgreementViolationLibrary.evaluateResolution(agreements[_agreementId], _proofType, _type, _resolution, _dataExchangeId, _iat, _iss, _sub);\\r\\n      emit PenaltyChoices(agreements[_agreementId].consumerPublicKey, _agreementId, agreements[_agreementId].violation.penaltyChoices);\\r\\n    }\\r\\n\\r\\n    function terminateAgreement(uint256 _agreementId, bool terminate) public{ \\r\\n      if(agreements[_agreementId].agreementDates[2]<=block.timestamp || terminate){  \\r\\n            agreements[_agreementId].state = State.Terminated;\\r\\n            emit AgreementTerminated(agreements[_agreementId].providerPublicKey, agreements[_agreementId].consumerPublicKey, _agreementId); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforcePenalty ( uint256 _id, string memory _chosenPenalty, uint256 _price, uint256 _fee, uint256 _newEndDate) public {\\r\\n        require((agreements[_id].state == State.Violated), \\\"Agreement must be violated in order to enforce penalty\\\");\\r\\n        if(keccak256(abi.encodePacked(_chosenPenalty)) == keccak256(abi.encodePacked(\\\"Terminate\\\"))){\\r\\n            terminateAgreement(_id, true);\\r\\n        }\\r\\n        else{\\r\\n            AgreementViolationLibrary.enforcePenalty (agreements[_id], _chosenPenalty, _price, _fee, _newEndDate);\\r\\n            emit AgreeOnPenalty(agreements[_id].providerPublicKey, agreements[_id].consumerPublicKey,\\r\\n                 agreements[_id].agreementId, _chosenPenalty, _newEndDate,_price, _fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function notifyConsentRevoked( string memory _dataOfferingId) public view returns (string[] memory) {    \\r\\n\\r\\n        uint256[] memory agreementIds = offeringId2agreementIds[_dataOfferingId];\\r\\n       \\r\\n        string[] memory consumers = new string[](agreementIds.length);\\r\\n        for (uint i = 0; i < agreementIds.length; i++){\\r\\n            consumers[i] = agreements[agreementIds[i]].consumerPublicKey;\\r\\n        }\\r\\n        return consumers;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x70afc08ec13acff6e97adee63fb2a2740d7fe21a307caef5921f1099e4ecff46\"}},\"version\":1}",
  "bytecode": "0x610d8a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635694954c1461005057806375fcea5614610072578063b5d48454146100a5575b600080fd5b81801561005c57600080fd5b5061007061006b366004610a43565b6100c5565b005b81801561007e57600080fd5b5061009261008d366004610b4d565b61033d565b6040519081526020015b60405180910390f35b6100b86100b3366004610baf565b610535565b60405161009c9190610c3a565b60006040518060e0016040528089815260200188815260200187815260200186815260200185815260200184815260200183815250905060405160200161011b906818dbdb5c1b195d195960ba1b815260090190565b6040516020818303038152906040528051906020012081604001516040516020016101469190610cd2565b6040516020818303038152906040528051906020012014156101a95760188901805460ff19168155600061017d60198c01826107e8565b61018b600283016000610825565b5050600a890180546000919060ff19166001835b0217905550610332565b6040516b1b9bdd10dbdb5c1b195d195960a21b6020820152602c016040516020818303038152906040528051906020012081604001516040516020016101ef9190610cd2565b6040516020818303038152906040528051906020012014156102305761021b8960028360c001516106d6565b600a890180546001919060ff1916828061019f565b604051671858d8d95c1d195960c21b60208201526028016040516020818303038152906040528051906020012081604001516040516020016102729190610cd2565b60405160208183030381529060405280519060200120141561029e5761021b8960028360c001516106d6565b6040516519195b9a595960d21b60208201526026016040516020818303038152906040528051906020012081604001516040516020016102de9190610cd2565b6040516020818303038152906040528051906020012014156103325760188901805460ff19168155600061031560198c01826107e8565b610323600283016000610825565b5050600a8901805460ff191690555b505050505050505050565b60006002601887015460ff16600481111561035a5761035a610bc8565b141561052b57846040516020016103719190610cd2565b604051602081830303815290604052805190602001207f4e6577456e6444617465466f7241677265656d656e7400000000000000000000141561041e574282116104125760405162461bcd60e51b815260206004820152602760248201527f4e657720656e642064617465206d7573742062652061667465722063757272656044820152666e74206461746560c81b60648201526084015b60405180910390fd5b600d860182905561051e565b604051602001610465907f4e6577456e6444617465466f7241677265656d656e74416e645265647563746981526a1bdb93d994185e5b595b9d60aa1b6020820152602b0190565b604051602081830303815290604052805190602001208560405160200161048c9190610cd2565b60405160208183030381529060405280519060200120141561051e574282116105085760405162461bcd60e51b815260206004820152602860248201527f4e657720656e642064617465206d757374206265206166746572206375727265604482015267373a103230ba329760c11b6064820152608401610409565b600d860182905560128601849055601486018390555b600a8601805460ff191690555b5093949350505050565b61053d610853565b6040805160608101909152601883018054829060ff16600481111561056457610564610bc8565b600481111561057557610575610bc8565b815260200160018201805461058990610cee565b80601f01602080910402602001604051908101604052809291908181526020018280546105b590610cee565b80156106025780601f106105d757610100808354040283529160200191610602565b820191906000526020600020905b8154815290600101906020018083116105e557829003601f168201915b505050918352505060408051606081019091526020909101906002830160036000835b828210156106c857838201805461063b90610cee565b80601f016020809104026020016040519081016040528092919081815260200182805461066790610cee565b80156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b505050505081526020019060010190610625565b505050915250909392505050565b60405180606001604052808360048111156106f3576106f3610bc8565b81526020018281526020016040518060600160405280604051806040016040528060098152602001685465726d696e61746560b81b81525081526020016040518060400160405280601681526020017f4e6577456e6444617465466f7241677265656d656e740000000000000000000081525081526020016040518060600160405280602b8152602001610d2a602b9139905290528051601885018054909190829060ff191660018360048111156107ad576107ad610bc8565b021790555060208281015180516107ca9260018501920190610877565b5060408201516107e090600283019060036108fb565b505050505050565b5080546107f490610cee565b6000825580601f10610804575050565b601f0160209004906000526020600020908101906108229190610947565b50565b50600061083282826107e8565b50600101600061084282826107e8565b506108519060010160006107e8565b565b604080516060808201835260008252602082015290810161087261095c565b905290565b82805461088390610cee565b90600052602060002090601f0160209004810192826108a557600085556108eb565b82601f106108be57805160ff19168380011785556108eb565b828001600101855582156108eb579182015b828111156108eb5782518255916020019190600101906108d0565b506108f7929150610947565b5090565b826003810192821561093b579160200282015b8281111561093b578251805161092b918491602090910190610877565b509160200191906001019061090e565b506108f7929150610983565b5b808211156108f75760008155600101610948565b60405180606001604052806003905b606081526020019060019003908161096b5790505090565b808211156108f757600061099782826107e8565b50600101610983565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109c757600080fd5b813567ffffffffffffffff808211156109e2576109e26109a0565b604051601f8301601f19908116603f01168101908282118183101715610a0a57610a0a6109a0565b81604052838152866020858801011115610a2357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080610100898b031215610a6057600080fd5b88359750602089013567ffffffffffffffff80821115610a7f57600080fd5b610a8b8c838d016109b6565b985060408b0135915080821115610aa157600080fd5b610aad8c838d016109b6565b975060608b0135915080821115610ac357600080fd5b610acf8c838d016109b6565b965060808b0135915080821115610ae557600080fd5b610af18c838d016109b6565b955060a08b0135945060c08b0135915080821115610b0e57600080fd5b610b1a8c838d016109b6565b935060e08b0135915080821115610b3057600080fd5b50610b3d8b828c016109b6565b9150509295985092959890939650565b600080600080600060a08688031215610b6557600080fd5b85359450602086013567ffffffffffffffff811115610b8357600080fd5b610b8f888289016109b6565b959895975050505060408401359360608101359360809091013592509050565b600060208284031215610bc157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610bf9578181015183820152602001610be1565b83811115610c08576000848401525b50505050565b60008151808452610c26816020860160208601610bde565b601f01601f19169290920160200192915050565b60006020808352835160058110610c6157634e487b7160e01b600052602160045260246000fd5b838201528381015160606040850152610c7d6080850182610c0e565b90506040850151601f19858303016060860152818290506060830160005b6003811015610cc6578482038352610cb4828551610c0e565b93860193928601929150600101610c9b565b50979650505050505050565b60008251610ce4818460208701610bde565b9190910192915050565b600181811c90821680610d0257607f821691505b60208210811415610d2357634e487b7160e01b600052602260045260246000fd5b5091905056fe4e6577456e6444617465466f7241677265656d656e74416e64526564756374696f6e4f665061796d656e74a2646970667358221220659c3b50b21025a098ea8dba5b7a322a5ea5a549f3979d6cf8e0d6dc2305f78464736f6c63430008090033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635694954c1461005057806375fcea5614610072578063b5d48454146100a5575b600080fd5b81801561005c57600080fd5b5061007061006b366004610a43565b6100c5565b005b81801561007e57600080fd5b5061009261008d366004610b4d565b61033d565b6040519081526020015b60405180910390f35b6100b86100b3366004610baf565b610535565b60405161009c9190610c3a565b60006040518060e0016040528089815260200188815260200187815260200186815260200185815260200184815260200183815250905060405160200161011b906818dbdb5c1b195d195960ba1b815260090190565b6040516020818303038152906040528051906020012081604001516040516020016101469190610cd2565b6040516020818303038152906040528051906020012014156101a95760188901805460ff19168155600061017d60198c01826107e8565b61018b600283016000610825565b5050600a890180546000919060ff19166001835b0217905550610332565b6040516b1b9bdd10dbdb5c1b195d195960a21b6020820152602c016040516020818303038152906040528051906020012081604001516040516020016101ef9190610cd2565b6040516020818303038152906040528051906020012014156102305761021b8960028360c001516106d6565b600a890180546001919060ff1916828061019f565b604051671858d8d95c1d195960c21b60208201526028016040516020818303038152906040528051906020012081604001516040516020016102729190610cd2565b60405160208183030381529060405280519060200120141561029e5761021b8960028360c001516106d6565b6040516519195b9a595960d21b60208201526026016040516020818303038152906040528051906020012081604001516040516020016102de9190610cd2565b6040516020818303038152906040528051906020012014156103325760188901805460ff19168155600061031560198c01826107e8565b610323600283016000610825565b5050600a8901805460ff191690555b505050505050505050565b60006002601887015460ff16600481111561035a5761035a610bc8565b141561052b57846040516020016103719190610cd2565b604051602081830303815290604052805190602001207f4e6577456e6444617465466f7241677265656d656e7400000000000000000000141561041e574282116104125760405162461bcd60e51b815260206004820152602760248201527f4e657720656e642064617465206d7573742062652061667465722063757272656044820152666e74206461746560c81b60648201526084015b60405180910390fd5b600d860182905561051e565b604051602001610465907f4e6577456e6444617465466f7241677265656d656e74416e645265647563746981526a1bdb93d994185e5b595b9d60aa1b6020820152602b0190565b604051602081830303815290604052805190602001208560405160200161048c9190610cd2565b60405160208183030381529060405280519060200120141561051e574282116105085760405162461bcd60e51b815260206004820152602860248201527f4e657720656e642064617465206d757374206265206166746572206375727265604482015267373a103230ba329760c11b6064820152608401610409565b600d860182905560128601849055601486018390555b600a8601805460ff191690555b5093949350505050565b61053d610853565b6040805160608101909152601883018054829060ff16600481111561056457610564610bc8565b600481111561057557610575610bc8565b815260200160018201805461058990610cee565b80601f01602080910402602001604051908101604052809291908181526020018280546105b590610cee565b80156106025780601f106105d757610100808354040283529160200191610602565b820191906000526020600020905b8154815290600101906020018083116105e557829003601f168201915b505050918352505060408051606081019091526020909101906002830160036000835b828210156106c857838201805461063b90610cee565b80601f016020809104026020016040519081016040528092919081815260200182805461066790610cee565b80156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b505050505081526020019060010190610625565b505050915250909392505050565b60405180606001604052808360048111156106f3576106f3610bc8565b81526020018281526020016040518060600160405280604051806040016040528060098152602001685465726d696e61746560b81b81525081526020016040518060400160405280601681526020017f4e6577456e6444617465466f7241677265656d656e740000000000000000000081525081526020016040518060600160405280602b8152602001610d2a602b9139905290528051601885018054909190829060ff191660018360048111156107ad576107ad610bc8565b021790555060208281015180516107ca9260018501920190610877565b5060408201516107e090600283019060036108fb565b505050505050565b5080546107f490610cee565b6000825580601f10610804575050565b601f0160209004906000526020600020908101906108229190610947565b50565b50600061083282826107e8565b50600101600061084282826107e8565b506108519060010160006107e8565b565b604080516060808201835260008252602082015290810161087261095c565b905290565b82805461088390610cee565b90600052602060002090601f0160209004810192826108a557600085556108eb565b82601f106108be57805160ff19168380011785556108eb565b828001600101855582156108eb579182015b828111156108eb5782518255916020019190600101906108d0565b506108f7929150610947565b5090565b826003810192821561093b579160200282015b8281111561093b578251805161092b918491602090910190610877565b509160200191906001019061090e565b506108f7929150610983565b5b808211156108f75760008155600101610948565b60405180606001604052806003905b606081526020019060019003908161096b5790505090565b808211156108f757600061099782826107e8565b50600101610983565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109c757600080fd5b813567ffffffffffffffff808211156109e2576109e26109a0565b604051601f8301601f19908116603f01168101908282118183101715610a0a57610a0a6109a0565b81604052838152866020858801011115610a2357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080610100898b031215610a6057600080fd5b88359750602089013567ffffffffffffffff80821115610a7f57600080fd5b610a8b8c838d016109b6565b985060408b0135915080821115610aa157600080fd5b610aad8c838d016109b6565b975060608b0135915080821115610ac357600080fd5b610acf8c838d016109b6565b965060808b0135915080821115610ae557600080fd5b610af18c838d016109b6565b955060a08b0135945060c08b0135915080821115610b0e57600080fd5b610b1a8c838d016109b6565b935060e08b0135915080821115610b3057600080fd5b50610b3d8b828c016109b6565b9150509295985092959890939650565b600080600080600060a08688031215610b6557600080fd5b85359450602086013567ffffffffffffffff811115610b8357600080fd5b610b8f888289016109b6565b959895975050505060408401359360608101359360809091013592509050565b600060208284031215610bc157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610bf9578181015183820152602001610be1565b83811115610c08576000848401525b50505050565b60008151808452610c26816020860160208601610bde565b601f01601f19169290920160200192915050565b60006020808352835160058110610c6157634e487b7160e01b600052602160045260246000fd5b838201528381015160606040850152610c7d6080850182610c0e565b90506040850151601f19858303016060860152818290506060830160005b6003811015610cc6578482038352610cb4828551610c0e565b93860193928601929150600101610c9b565b50979650505050505050565b60008251610ce4818460208701610bde565b9190910192915050565b600181811c90821680610d0257607f821691505b60208210811415610d2357634e487b7160e01b600052602260045260246000fd5b5091905056fe4e6577456e6444617465466f7241677265656d656e74416e64526564756374696f6e4f665061796d656e74a2646970667358221220659c3b50b21025a098ea8dba5b7a322a5ea5a549f3979d6cf8e0d6dc2305f78464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}